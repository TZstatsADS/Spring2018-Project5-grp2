addrect = 11)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 16)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 15)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 13)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 12)
library(corrplot)
corr_mat <- cor(df[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 13)
library(caret)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1])
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
findCorrelation(corr_mat,cutoff = .75)
colnames(df)
colnames(df)[findCorrelation(corr_mat,cutoff = .75)]
colnames(df)
colnames(df)[findCorrelation(corr_mat,cutoff = .75)+1]
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-c(1,33)]
head(df)
df$diagnosis <- as.integer(df$diagnosis)-1
df <- df[,-c(1,33)]
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
head(df)
df <- df[,-c(1,33)]
head(df)
df$diagnosis <- factor(ifelse(df$diagnosis=="B","Benign","Malignant"))
head(df)
df$diagnosis <- as.integer(df$diagnosis)-1
head(df)
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-c(1,33)]
df$diagnosis <- as.integer(df$diagnosis)-1
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-c(1,33)]
df$diagnosis <- factor(ifelse(df$diagnosis=="B","Benign","Malignant"))
df$diagnosis <- as.integer(df$diagnosis)-1
control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model <- train(diagnosis~,data=df,method="lvq", preProcess="scale", trControl=control)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model <- train(diagnosis~., data=df, method="lvq", preProcess="scale", trControl=control)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
library(caret)
control <- rfeControl(functions=nbFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
library(caret)
library(randomForest)
install.packages("randomForest")
library(caret)
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
library(caret)
library(randomForest)
control <- rfeControl(functions=nbFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
install.packages("klaR")
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=nbFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
df$diagnosis <- factor(ifelse(df$diagnosis=="B","Benign","Malignant"))
df <- df[,-c(1,33)]
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=nbFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model <- train(diagnosis~., data=df, method="lvq", preProcess="scale", trControl=control)
varImp(model, scale=FALSE)
importance <- varImp(model, scale=FALSE)
plot(importance)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
highlyCorrelated <- findCorrelation(corr_mat, cutoff=0.75)
print(highlyCorrelated)
colnames(df)[highlyCorrelated+1]
colnames(df[,2:ncol(df))[highlyCorrelated]
colnames(df[,2:ncol(df)])[highlyCorrelated]
results
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(df[,2:ncol(df)],df[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df[,2:ncol(df)],df[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
set.seed(123)
index <- sample(1:nrow(df),0.8*nrow(df))
df.train <- df[index,]
df.test <- df[-index,]
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 13)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 12)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 13)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model <- train(diagnosis~., data=df.train, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df,train[,2:31],df[,1],size=c(1:30),rfeControl=control)
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df[,1],size=c(1:30),rfeControl=control)
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
results
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=ldaFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=nbFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=5,rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
results
plot(results, type=c("g", "o"))
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
predictors(results)
results
control <- trainControl(method = "repeatedcv", number = k, repeats = 3)
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(diagnosis~., data=df.train, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(diagnosis~., data=df.train, method="chaid", preProcess="scale", trControl=control)
install.packages(CHAID)
install.packages("CHAID")
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(diagnosis~., data=df.train, method="rf", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 16)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 15)
library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
df.train[,"texture_worst"]
df.train[,"texture_worst"]
df.train <- df.train[,feature_selected]
feature_selected <- c("texture_worst", "area_se", "perimeter_worst",
"concave.points_worst", "concavity_worst", "fractal_dimension_se",
"concavity_se", "texture_se", "smoothness_se",
"smoothness_worst", "fractal_dimension_worst", "symmetry_se",
"symmetry_mean", "symmetry_worst")
df.train <- df.train[,feature_selected]
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,2:31],df.train[,1],size=c(1:30),rfeControl=control)
# Delete first column from dataset because it has no use,and delete last column from dataset as its entries are all NA's
df <- df[,-c(1,33)]
# Factorize the diagnosis attribute
df$diagnosis <- factor(ifelse(df$diagnosis=="B","Benign","Malignant"))
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
# Delete first column from dataset because it has no use,and delete last column from dataset as its entries are all NA's
df <- df[,-c(1,33)]
# Factorize the diagnosis attribute
df$diagnosis <- factor(ifelse(df$diagnosis=="B","Benign","Malignant"))
df$diagnosis <- as.integer(df$diagnosis)-1   #M=1 B=0
# Split entire data into 80% train set and 20% test set
set.seed(123)
index <- sample(1:nrow(df),0.8*nrow(df))
df.train <- df[index,]
df.test <- df[-index,]
# Check proportion of diagnosis (Benign/Malignant) in train/test sets
#prop.table(table(df.train$diagnosis))
#prop.table(table(df.test$diagnosis))
df.train <- df.train[,c("diagnosis",feature_selected)]
df.train[,-1]
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],df.train[,1],size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(factor(diagnosis)~., data=df.train, method="rf", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],factor(df.train[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
feature_selected <- c("perimeter_worst", "concave.points_worst", "area_se",
"concavity_worst", "texture_worst", "smoothness_worst",
"symmetry_worst", "concavity_se")
df.train <- df.train[,c("diagnosis",feature_selected)]
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=nbFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],factor(df.train[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
library(caret)
library("klaR")
library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],factor(df.train[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
ggpairs(df.train, aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=12))
ggpairs(df.train[,50], aes(color=factor(diagnosis), alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=12))
ggpairs(df.train[1:50,], aes(color=factor(diagnosis), alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=12))
ggpairs(df.train[1:50,], aes(color=c(1,2), alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=12))
df.train$diagnosis <- factor(df.train$diagnosis)
ggpairs(df.train[1:50,], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=12))
# Packages that will be used
packages.used <- c("corrplot", "caret", "randomForest")
# Check packages that need to be installed
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# Install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# Load libraries
library("corrplot")
library("caret")
library("randomForest")
# Set working directory to the doc folder
setwd("~/GitHub/Spring2018-Project5-grp_2/doc")
# Load data
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
# Print the head of data
head(df)
# Delete the first column from dataset as id won't be used, and delete last column from dataset as its entries are all NA's
df <- df[,-c(1,33)]
# Factorize the diagnosis attribute
df$diagnosis <- factor(df$diagnosis)
#df$diagnosis <- as.integer(df$diagnosis)-1   # M=1 B=0
# Split entire data into 80% train set and 20% test set
set.seed(123)
index <- sample(1:nrow(df),0.8*nrow(df))
df.train <- df[index,]
df.test <- df[-index,]
# Check proportion of diagnosis (Benign/Malignant) in train/test sets
#prop.table(table(df.train$diagnosis))
#prop.table(table(df.test$diagnosis))
#library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(factor(diagnosis)~., data=df.train, method="rf", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
feature_selected <- c("texture_worst", "area_se", "perimeter_worst",
"concave.points_worst", "concavity_worst", "fractal_dimension_se",
"concavity_se", "texture_se", "smoothness_se",
"smoothness_worst", "fractal_dimension_worst", "symmetry_se",
"symmetry_mean", "symmetry_worst")
df.train <- df.train[,c("diagnosis",feature_selected)]
#library(caret)
#library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],factor(df.train[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
feature_selected <- c("perimeter_worst", "concave.points_worst", "area_se",
"concavity_worst", "texture_worst", "smoothness_worst",
"symmetry_worst", "concavity_se", "fractal_dimension_worst",
"symmetry_mean", "fractal_dimension_se")
df.train <- df.train[,c("diagnosis",feature_selected)]
df.train
str(df)
summary(df)
library(Hmisc)
describe(df)
# Packages that will be used
packages.used <- c("corrplot", "caret", "randomForest")
# Check packages that need to be installed
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# Install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# Load libraries
library("corrplot")
library("caret")
library("randomForest")
# Set working directory to the doc folder
setwd("~/GitHub/Spring2018-Project5-grp_2/doc")
# Load data
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
# Print the head of data
head(df)
# Load data
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
# Print the head of data
head(df)
summary(df)
# Delete the first column from dataset as id won't be used, and delete last column from dataset as its entries are all NA's
df <- df[,-c(1,33)]
# Factorize the diagnosis attribute
df$diagnosis <- factor(df$diagnosis)
#df$diagnosis <- as.integer(df$diagnosis)-1   # M=1 B=0
# Split entire data into 80% train set and 20% test set
set.seed(123)
index <- sample(1:nrow(df),0.8*nrow(df))
df.train <- df[index,]
df.test <- df[-index,]
# Check proportion of diagnosis (Benign/Malignant) in train/test sets
#prop.table(table(df.train$diagnosis))
#prop.table(table(df.test$diagnosis))
#library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(factor(diagnosis)~., data=df.train, method="rf", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
feature_selected <- c("texture_worst", "area_se", "perimeter_worst",
"concave.points_worst", "concavity_worst", "fractal_dimension_se",
"concavity_se", "texture_se", "smoothness_se",
"smoothness_worst", "fractal_dimension_worst", "symmetry_se",
"symmetry_mean", "symmetry_worst")
df.train <- df.train[,c("diagnosis",feature_selected)]
#library(caret)
#library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train[,-1],factor(df.train[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
feature_selected <- c("perimeter_worst", "concave.points_worst", "area_se",
"concavity_worst", "texture_worst", "smoothness_worst",
"symmetry_worst", "concavity_se", "fractal_dimension_worst",
"symmetry_mean", "fractal_dimension_se")
df.train <- df.train[,c("diagnosis",feature_selected)]
