# Packages that will be used
packages.used <- c("corrplot", "caret", "randomForest")
# Check packages that need to be installed
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# Install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# Load libraries
library("corrplot")
library("caret")
library("randomForest")
# Set working directory to the doc folder
setwd("~/GitHub/Spring2018-Project5-grp_2/doc")
setwd("~/Documents/GitHub/Spring2018-Project5-grp_2/doc")
# Load data
df <- read.csv("../data/data.csv", header = TRUE, stringsAsFactors = FALSE)
# Print the head of data
head(df)
summary(df)
# Delete the first column from dataset as id won't be used, and delete last column from dataset as its entries are all NA's
df <- df[,-c(1,33)]
# Factorize the diagnosis attribute
df$diagnosis <- factor(df$diagnosis)
df$diagnosis <- as.integer(df$diagnosis)-1   # M=1 B=0
# Split entire data into 80% train set and 20% test set
set.seed(123)
index <- sample(1:nrow(df),0.8*nrow(df))
df.train <- df[index,]
df.test <- df[-index,]
# Check proportion of diagnosis (Benign/Malignant) in train/test sets
#prop.table(table(df.train$diagnosis))
#prop.table(table(df.test$diagnosis))
#library(corrplot)
corr_mat <- cor(df.train[,2:ncol(df)])
corrplot(corr_mat, method = "square", order = "hclust",
# adjust the color, size and rotation degree of the text label
tl.col = "black", tl.cex = 0.6, tl.srt = 45,
# adjust the color, format, size of the corrlation display
addCoef.col = "black", addCoefasPercent = TRUE, number.cex=0.45,
addrect = 14)
control <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
model <- train(factor(diagnosis)~., data=df.train, method="rf", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
feature_selected <- c("texture_worst", "area_se", "perimeter_worst",
"concave.points_worst", "concavity_worst", "fractal_dimension_se",
"concavity_se", "texture_se", "smoothness_se",
"smoothness_worst", "fractal_dimension_worst", "symmetry_se",
"symmetry_mean", "symmetry_worst")
df.train2 <- df.train[,c("diagnosis",feature_selected)]
#library(caret)
#library(randomForest)
control <- rfeControl(functions=rfFuncs, method="cv", number=5)
results <- rfe(df.train2[,-1],factor(df.train2[,1]),size=c(1:14),rfeControl=control)
predictors(results)
plot(results, type=c("g", "o"))
feature_selected <- c("perimeter_worst", "concave.points_worst", "area_se",
"concavity_worst", "texture_worst", "smoothness_worst",
"symmetry_worst", "concavity_se", "fractal_dimension_worst",
"symmetry_mean", "fractal_dimension_se")
df.train2 <- df.train2[,c("diagnosis",feature_selected)]
df.test2 <- df.test[,c("diagnosis",feature_selected)]
View(df.train)
library(e1071)
library(dplyr)
View(df.test)
View(df.test)
run.svm <- TRUE
source("../lib/svm.R")
if(run.svm){
output_svm <- svm(df.train,df.test)
output2_svm <- svm(df.train2,df.test2)
save(output_svm,file = "../output/output_svm.RData")
save(output2_svm,file = "../output/output2_svm.RData")
}else{
load("../output/output_svm.RData")
load("../output/output2_svm.RData")
}
View(df.train)
run.svm <- TRUE
source("../lib/svm.R")
if(run.svm){
output_svm <- svm(df.train,df.test)
output2_svm <- svm(df.train2,df.test2)
save(output_svm,file = "../output/output_svm.RData")
save(output2_svm,file = "../output/output2_svm.RData")
}else{
load("../output/output_svm.RData")
load("../output/output2_svm.RData")
}
run.svm <- TRUE
source("../lib/svm.R")
if(run.svm){
output_svm <- SVM(df.train,df.test)
output2_svm <- SVM(df.train2,df.test2)
save(output_svm,file = "../output/output_svm.RData")
save(output2_svm,file = "../output/output2_svm.RData")
}else{
load("../output/output_svm.RData")
load("../output/output2_svm.RData")
}
run.svm <- TRUE
source("../lib/svm.R")
if(run.svm){
output_svm <- SVM(df.train,df.test)
output2_svm <- SVM(df.train2,df.test2)
save(output_svm,file = "../output/output_svm.RData")
save(output2_svm,file = "../output/output2_svm.RData")
}else{
load("../output/output_svm.RData")
load("../output/output2_svm.RData")
}
output_svm
output2_svm
output_svm
View(df.test)
run.svm <- TRUE
source("../lib/svm.R")
if(run.svm){
output_svm <- SVM(df.train,df.test)
output2_svm <- SVM(df.train2,df.test2)
save(output_svm,file = "../output/output_svm.RData")
save(output2_svm,file = "../output/output2_svm.RData")
}else{
load("../output/output_svm.RData")
load("../output/output2_svm.RData")
}
output_svm
output2_svm
View(df.test)
View(df.test2)
run.rf <- TRUE
source("../lib/rf.R")
if(run.rf){
output_rf <- RF(df.train,df.test)
output2_rf <- RF(df.train2,df.test2)
save(output_rf,file = "../output/output_rf.RData")
save(output2_rf,file = "../output/output2_rf.RData")
}else{
load("../output/output_rf.RData")
load("../output/output2_rf.RData")
}
run.rf <- TRUE
source("../lib/rf.R")
if(run.rf){
output_rf <- RF(df.train,df.test)
output2_rf <- RF(df.train2,df.test2)
save(output_rf,file = "../output/output_rf.RData")
save(output2_rf,file = "../output/output2_rf.RData")
}else{
load("../output/output_rf.RData")
load("../output/output2_rf.RData")
}
output_rf
output2_rf
